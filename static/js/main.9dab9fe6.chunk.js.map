{"version":3,"sources":["Spinner-1.3s-200px.svg","memes/got_meme.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","backupTitle","useStyles","makeStyles","container","textAlign","margin","maxWidth","height","meme","text","image","width","App","classes","useState","backupMeme","setMeme","title","setTitle","memeCounter","setMemeCounter","loading","setLoading","Container","className","Typography","variant","Paper","src","spinner","alt","Button","color","onClick","axios","get","then","response","data","url","catch","error","console","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,sC,gPCKrCC,EAAc,2BAEdC,EAAYC,YAAW,CAC3BC,UAAW,CACTC,UAAW,SACXC,OAAQ,WACRC,SAAU,oBACVC,OAAQ,QAEVC,KAAM,CACJH,OAAQ,YAEVI,KAAM,CACJJ,OAAQ,YAEVK,MAAO,CACLC,MAAO,UA+CIC,MA3Cf,WACE,IAAMC,EAAUZ,IADF,EAEUa,mBAASC,KAFnB,mBAEPP,EAFO,KAEDQ,EAFC,OAGYF,mBAASd,GAHrB,mBAGPiB,EAHO,KAGAC,EAHA,OAIwBJ,mBAAS,GAJjC,mBAIPK,EAJO,KAIMC,EAJN,OAKgBN,oBAAS,GALzB,mBAKPO,EALO,KAKEC,EALF,KA+Bd,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAWX,EAAQV,WAC5B,kBAACsB,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWX,EAAQJ,MAA5C,uDACA,kBAACkB,EAAA,EAAD,CAAOH,UAAWX,EAAQL,MAdxBa,EACA,yBAAKO,IAAKC,IAASC,IAAI,iBAGvB,6BACE,yBAAKF,IAAKpB,EAAMsB,IAAI,UAAUN,UAAWX,EAAQH,QACjD,kBAACe,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWX,EAAQJ,MAAOQ,KAWvD,kBAACc,EAAA,EAAD,CAAQC,MAAM,UAAUC,QA9BZ,WACdX,GAAW,GACXY,IAAMC,IAAI,wCAAwCC,MAAK,SAACC,GACtDrB,EAAQqB,EAASC,KAAKC,KACtBrB,EAASmB,EAASC,KAAKrB,OACvBG,EAAeD,EAAc,GAC7BG,GAAW,MACVkB,OAAM,SAACC,GACRC,QAAQD,MAAMA,QAsBd,gBACA,kBAAChB,EAAA,EAAD,CAAYC,QAAQ,SAApB,mBAA6CP,EAA7C,8CCnDcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.9dab9fe6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner-1.3s-200px.2f2d2496.svg\";","module.exports = __webpack_public_path__ + \"static/media/got_meme.d5133e34.png\";","import React, { useState } from 'react';\nimport { Typography, Container, Paper, Button, makeStyles } from '@material-ui/core';\nimport axios from 'axios';\nimport spinner from './Spinner-1.3s-200px.svg';\nimport backupMeme from './memes/got_meme.png';\nconst backupTitle = 'Think you have a chance?';\n\nconst useStyles = makeStyles({\n  container: {\n    textAlign: 'center',\n    margin: '5vh auto',\n    maxWidth: 'calc(500px + 2vw)',\n    height: '90vh'\n  },\n  meme: {\n    margin: '1vh auto'\n  },\n  text: {\n    margin: '1vh auto'\n  },\n  image: {\n    width: '100%'\n  }\n})\n\nfunction App () {\n  const classes = useStyles();\n  const [meme, setMeme] = useState(backupMeme);\n  const [title, setTitle] = useState(backupTitle);\n  const [memeCounter, setMemeCounter] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  const getMeme = () => {\n    setLoading(true);\n    axios.get('https://meme-api.herokuapp.com/gimme').then((response) => {\n      setMeme(response.data.url);\n      setTitle(response.data.title);\n      setMemeCounter(memeCounter + 1);\n      setLoading(false);\n    }).catch((error) => {\n      console.error(error);\n    })\n  };\n\n  const renderMeme = () => {\n    if (loading) return (\n        <img src={spinner} alt='loading meme' />\n    )\n    return (\n        <div>\n          <img src={meme} alt='my meme' className={classes.image}/>\n          <Typography variant='h6' className={classes.text}>{title}</Typography>\n        </div>\n    )\n  }\n\n  return (\n    <Container className={classes.container}>\n      <Typography variant='h5' className={classes.text}>Too much time on your hands to be here ðŸ¤¦</Typography>\n      <Paper className={classes.meme}>\n        {renderMeme()}\n      </Paper>\n      <Button color='primary' onClick={getMeme}>Give me more</Button>\n      <Typography variant='body1'>You have wasted {memeCounter} meme(s) worth of your life ðŸ˜‚</Typography>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}